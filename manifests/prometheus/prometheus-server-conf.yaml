apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring
data:
  prometheus.rules: |-
    groups:
    - name: deploy.better.metric.rules
      rules:
      - record: namespace_asset_cpu_usage_seconds_total
        expr: |
          sum by (namespace, assetAlias) (
                  sum(rate(container_cpu_usage_seconds_total{image!="", container!=""}[5m])) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)
                  label_replace(kube_pod_labels{job="kube-state-metrics"}, "assetAlias", "$1", "label_assetAlias","(.*)")
          )
      - record: namespace_asset_cpu_resource_requests
        expr: |
          sum by (namespace, assetAlias) (
                  sum(kube_pod_container_resource_requests{resource="cpu"}) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)
                  label_replace(kube_pod_labels{job="kube-state-metrics"}, "assetAlias", "$1", "label_assetAlias","(.*)")
          )
      - record: namespace_asset_memory_usage_bytes
        expr: |
          sum by (namespace, assetAlias) (
                  sum(container_memory_usage_bytes{image!="", container!=""}) by (namespace, pod)
                  * on (namespace, pod) group_left(assetAlias)
                  label_replace(kube_pod_labels{job="kube-state-metrics"}, "assetAlias", "$1", "label_assetAlias","(.*)")
          )
      - record: namespace_asset_memory_resource_requests
        expr: |
          sum by (namespace, assetAlias) (
                  sum(kube_pod_container_resource_requests{resource="memory"}) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)
                  label_replace(kube_pod_labels{job="kube-state-metrics"}, "assetAlias", "$1", "label_assetAlias","(.*)")
          )
      - record: namespace_asset_pod_cpu_utilization
        expr: namespace_asset_cpu_usage_seconds_total * 100 / namespace_asset_cpu_resource_requests
        labels:
          numalogic: "true"
      - record: namespace_asset_pod_memory_utilization
        expr: namespace_asset_memory_usage_bytes * 100 / namespace_asset_memory_resource_requests
        labels:
          numalogic: "true"
      - record: namespace_app_pod_count
        expr: |
          label_join((sum(label_replace(
                      (kube_pod_status_ready{condition="true"} * on (namespace, pod) group_left(label_app) kube_pod_labels{job="kube-state-metrics"}), "app", "$1", "label_app","(.*)")) by (namespace, app)), "apps_deployment", "", "app"
          )
      - record: namespace_app_pod_count_no_alert
        expr: sum(namespace_app_pod_count) by (namespace, app, apps_deployment)
      - record: namespace_app_pod_http_server_requests_latency
        expr: label_join((sum(rate(http_server_requests_seconds_sum{status="200"}[1m])) by (namespace, app) / sum(rate(http_server_requests_seconds_count{status="200"}[1m])) by (namespace, app)), "apps_deployment", "", "app")
        labels:
          numalogic: "true"
      - record: namespace_app_pod_http_server_requests_errors_4xx
        expr: label_join((sum(rate(http_server_requests_seconds_count{status=~"4[0-9]+"}[1m])) by (namespace, app)), "apps_deployment", "", "app") / namespace_app_pod_count_no_alert
      - record: namespace_app_pod_http_server_requests_errors_5xx
        expr: label_join((sum(rate(http_server_requests_seconds_count{status=~"5[0-9]+"}[1m])) by (namespace, app)), "apps_deployment", "", "app") / namespace_app_pod_count_no_alert
      - record: namespace_app_pod_http_server_requests_2xx
        expr: label_join((sum(rate(http_server_requests_seconds_count{status=~"2[0-9]+"}[1m])) by (namespace, app)), "apps_deployment", "", "app") / namespace_app_pod_count_no_alert
      - record: namespace_app_pod_http_server_requests_errors
        expr: label_join((sum(rate(http_server_requests_seconds_count{status=~"[4-5][0-9]+"}[1m])) by (namespace, app)), "apps_deployment", "", "app") / namespace_app_pod_count_no_alert
        labels:
          numalogic: "true"
      - record: namespace_app_pod_http_server_requests_total
        expr: label_join((sum(rate(http_server_requests_seconds_count[1m])) by (namespace, app)), "apps_deployment", "", "app") / namespace_app_pod_count_no_alert
      - record: namespace_app_pod_http_server_requests_error_rate
        expr: namespace_app_pod_http_server_requests_errors_5xx / namespace_app_pod_http_server_requests_total
        labels:
          numalogic: "true"
      - record: namespace_hash_pod_count
        expr: sum(label_replace(label_replace((kube_pod_status_ready{condition="true"} * on (namespace, pod) group_left(label_rollouts_pod_template_hash, label_pod_template_hash) kube_pod_labels{job="kube-state-metrics"}), "rollouts_pod_template_hash", "$1", "label_rollouts_pod_template_hash","(.*)"), "pod_template_hash", "$1", "label_pod_template_hash","(.*)")) by (namespace, rollouts_pod_template_hash, pod_template_hash)
      - record: namespace_hash_pod_count_no_alert
        expr: sum(namespace_hash_pod_count) by (namespace, rollouts_pod_template_hash, pod_template_hash)
      - record: namespace_hash_http_server_requests_errors_5xx
        expr: sum(rate(http_server_requests_seconds_count{status=~"5[0-9]+"}[1m])) by (namespace, pod_template_hash, rollouts_pod_template_hash) / namespace_hash_pod_count_no_alert
      - record: namespace_hash_pod_http_server_requests_total
        expr: sum(rate(http_server_requests_seconds_count[1m])) by (namespace, rollouts_pod_template_hash, pod_template_hash) / namespace_hash_pod_count_no_alert
      - record: namespace_hash_pod_http_server_requests_error_rate
        expr: namespace_hash_http_server_requests_errors_5xx / namespace_hash_pod_http_server_requests_total
        labels:
          numalogic: "true"
      - record: namespace_hash_pod_http_server_requests_latency
        expr: sum(rate(http_server_requests_seconds_sum{status="200"}[1m])) by (namespace, rollouts_pod_template_hash, pod_template_hash) / sum(rate(http_server_requests_seconds_count{status="200"}[1m])) by (namespace, rollouts_pod_template_hash, pod_template_hash)
        labels:
          numalogic: "true"
  prometheus.yml: |-
    remote_write:
      -
        name: prometheus
        url: "https://numalogic-prometheus-pipeline-input.numalogic-prometheus.svc.cluster.local:8443/vertices/input"
        remote_timeout: 1m
        queue_config:
          capacity: 10000
          min_shards: 10
          max_shards: 100
          max_samples_per_send: 1000
          batch_send_deadline: 10s
          min_backoff: 30ms
          max_backoff: 100ms
        tls_config:
          insecure_skip_verify: true
        write_relabel_configs:
        - action: keep
          regex: namespace_*;true
          source_labels:
          - __name__
          - numalogic
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      - job_name: 'pushgateway'
        honor_labels: true
        static_configs:
          - targets: ['pushgateway.monitoring.svc.cluster.local:9091']

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep

      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      - job_name: serviceMonitor/addon-metricset-ns/iks-appmonitor-actuator/0
        honor_labels: false
        kubernetes_sd_configs:
        - role: endpoints
        scrape_interval: 5s
        metrics_path: /actuator/prometheus
        scheme: https
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
        - source_labels:
          - job
          target_label: __tmp_prometheus_job_name
        - action: keep
          source_labels:
          - __meta_kubernetes_service_label_iks_metric
          - __meta_kubernetes_service_labelpresent_iks_metric
          regex: (actuator-prometheus|https-actuator-prometheus);true
        - action: keep
          source_labels:
          - __meta_kubernetes_endpoint_port_name
          regex: iks-metric
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Node;(.*)
          replacement: ${1}
          target_label: node
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Pod;(.*)
          replacement: ${1}
          target_label: pod
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        - source_labels:
          - __meta_kubernetes_pod_name
          target_label: pod
        - source_labels:
          - __meta_kubernetes_pod_container_name
          target_label: container
        - source_labels:
          - __meta_kubernetes_pod_label_app
          target_label: app
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_assetId
          target_label: assetId
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l1
          target_label: l1
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l2
          target_label: l2
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_env
          target_label: env
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_pod_template_hash
          target_label: pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_rollouts_pod_template_hash
          target_label: rollouts_pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: job
          replacement: ${1}
        - target_label: endpoint
          replacement: iks-metric
        - source_labels:
          - __address__
          target_label: __tmp_hash
          modulus: 1
          action: hashmod
        - source_labels:
          - __tmp_hash
          regex: 0
          action: keep
        sample_limit: 2000
