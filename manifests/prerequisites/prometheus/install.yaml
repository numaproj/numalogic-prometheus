apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: monitoring
  name: monitoring
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.3.0
  name: kube-state-metrics
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.3.0
  name: kube-state-metrics
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - nodes
  - pods
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs:
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - list
  - watch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - list
  - watch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  - volumeattachments
  verbs:
  - list
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  - ingresses
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.3.0
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
- kind: ServiceAccount
  name: kube-state-metrics
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
---
apiVersion: v1
data:
  prometheus.rules: "groups:\n- name: deploy.better.metric.rules\n  rules:\n  - record:
    namespace_asset_cpu_usage_seconds_total\n    expr: |\n      sum by (namespace,
    assetAlias) (\n              sum(rate(container_cpu_usage_seconds_total{image!=\"\",
    container!=\"\"}[5m])) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n
    \             label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\",
    \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_cpu_resource_requests\n
    \   expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"cpu\"})
    by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"},
    \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n    labels:\n
    \     numalogic: \"true\"\n  - record: namespace_asset_memory_usage_bytes\n    expr:
    |\n      sum by (namespace, assetAlias) (\n              sum(container_memory_usage_bytes{image!=\"\",
    container!=\"\"}) by (namespace, pod)\n              * on (namespace, pod) group_left(assetAlias)\n
    \             label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\",
    \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_memory_resource_requests\n
    \   expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"memory\"})
    by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"},
    \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_pod_cpu_utilization\n
    \   expr: namespace_asset_cpu_usage_seconds_total * 100 / namespace_asset_cpu_resource_requests\n
    \   labels:\n      numalogic: \"true\"\n  - record: namespace_asset_pod_memory_utilization\n
    \   expr: namespace_asset_memory_usage_bytes * 100 / namespace_asset_memory_resource_requests\n
    \   labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_count\n
    \   expr: |\n      label_join((sum(label_replace(\n                  (kube_pod_status_ready{condition=\"true\"}
    * on (namespace, pod) group_left(label_app) kube_pod_labels{job=\"kube-state-metrics\"}),
    \"app\", \"$1\", \"label_app\",\"(.*)\")) by (namespace, app)), \"apps_deployment\",
    \"\", \"app\"\n      )\n  - record: namespace_app_pod_count_no_alert\n    expr:
    sum(namespace_app_pod_count) by (namespace, app, apps_deployment)\n  - record:
    namespace_app_pod_http_server_requests_latency\n    expr: label_join((sum(rate(http_server_requests_seconds_sum{status=\"200\"}[1m]))
    by (namespace, app) / sum(rate(http_server_requests_seconds_count{status=\"200\"}[1m]))
    by (namespace, app)), \"apps_deployment\", \"\", \"app\")\n    labels:\n      numalogic:
    \"true\"\n  - record: namespace_app_pod_http_server_requests_errors_4xx\n    expr:
    label_join((sum(rate(http_server_requests_seconds_count{status=~\"4[0-9]+\"}[1m]))
    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
    \ - record: namespace_app_pod_http_server_requests_errors_5xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m]))
    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
    \ - record: namespace_app_pod_http_server_requests_2xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"2[0-9]+\"}[1m]))
    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
    \ - record: namespace_app_pod_http_server_requests_errors\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"[4-5][0-9]+\"}[1m]))
    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
    \   labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_http_server_requests_total\n
    \   expr: label_join((sum(rate(http_server_requests_seconds_count[1m])) by (namespace,
    app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
    \ \n  - record: namespace_app_pod_http_server_requests_error_rate\n    expr: namespace_app_pod_http_server_requests_errors_5xx
    / namespace_app_pod_http_server_requests_total\n    labels:\n      numalogic:
    \"true\"\n  - record: namespace_hash_pod_count\n    expr: sum(label_replace((kube_pod_status_ready{condition=\"true\"}
    * on (namespace, pod) group_left(label_rollouts_pod_template_hash) kube_pod_labels{job=\"kube-state-metrics\"}),
    \"hash_id\", \"$1\", \"label_rollouts_pod_template_hash\",\"(.*)\")) by (namespace,
    hash_id)\n  - record: namespace_hash_http_server_requests_errors_5xx\n    expr:
    sum(label_replace(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m]),
    \"hash_id\", \"$1\", \"rollouts_pod_template_hash\", \"(.*)\")) by (namespace,
    hash_id) / namespace_hash_pod_count\n  - record: namespace_hash_pod_http_server_requests_total\n
    \   expr: sum(label_replace(rate(http_server_requests_seconds_count[1m]), \"hash_id\",
    \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id) / namespace_hash_pod_count\n
    \ - record: namespace_hash_pod_http_server_requests_error_rate\n    expr: namespace_hash_http_server_requests_errors_5xx
    / namespace_hash_pod_http_server_requests_total\n    labels:\n      numalogic:
    \"true\"\n  - record: namespace_hash_pod_http_server_requests_latency\n    expr:
    sum(label_replace(rate(http_server_requests_seconds_sum{status=\"200\"}[1m]),
    \"hash_id\", \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace,
    hash_id) / sum(label_replace(rate(http_server_requests_seconds_count{status=\"200\"}[1m]),\"hash_id\",
    \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id)\n    labels:\n
    \     numalogic: \"true\""
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      - job_name: 'pushgateway'
        honor_labels: true
        static_configs:
          - targets: ['pushgateway.monitoring.svc.cluster.local:9091']

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep

      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

      - job_name: serviceMonitor/addon-metricset-ns/iks-appmonitor-actuator/0
        honor_labels: false
        kubernetes_sd_configs:
        - role: endpoints
        scrape_interval: 5s
        metrics_path: /actuator/prometheus
        scheme: https
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
        - source_labels:
          - job
          target_label: __tmp_prometheus_job_name
        - action: keep
          source_labels:
          - __meta_kubernetes_service_label_iks_metric
          - __meta_kubernetes_service_labelpresent_iks_metric
          regex: (actuator-prometheus|https-actuator-prometheus);true
        - action: keep
          source_labels:
          - __meta_kubernetes_endpoint_port_name
          regex: iks-metric
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Node;(.*)
          replacement: ${1}
          target_label: node
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Pod;(.*)
          replacement: ${1}
          target_label: pod
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        - source_labels:
          - __meta_kubernetes_pod_name
          target_label: pod
        - source_labels:
          - __meta_kubernetes_pod_container_name
          target_label: container
        - source_labels:
          - __meta_kubernetes_pod_label_app
          target_label: app
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_assetId
          target_label: assetId
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l1
          target_label: l1
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l2
          target_label: l2
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_env
          target_label: env
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_pod_template_hash
          target_label: pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_rollouts_pod_template_hash
          target_label: rollouts_pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: job
          replacement: ${1}
        - target_label: endpoint
          replacement: iks-metric
        - source_labels:
          - __address__
          target_label: __tmp_hash
          modulus: 1
          action: hashmod
        - source_labels:
          - __tmp_hash
          regex: 0
          action: keep
        sample_limit: 2000
kind: ConfigMap
metadata:
  labels:
    name: prometheus-server-conf
  name: prometheus-server-conf
  namespace: monitoring
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.3.0
  name: kube-state-metrics
  namespace: monitoring
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 8080
    targetPort: http-metrics
  - name: telemetry
    port: 8081
    targetPort: telemetry
  selector:
    app.kubernetes.io/name: kube-state-metrics
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "9090"
    prometheus.io/scrape: "true"
  name: prometheus-service
  namespace: monitoring
spec:
  ports:
  - nodePort: 30000
    port: 8080
    targetPort: 9090
  selector:
    app: prometheus-server
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pushgateway-target
  name: pushgateway
  namespace: monitoring
spec:
  ports:
  - name: pushgateway
    port: 9091
    protocol: TCP
    targetPort: 9091
  selector:
    app: pushgateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: pushgateway-lb
  namespace: monitoring
spec:
  ports:
  - name: pushgateway
    port: 9091
    protocol: TCP
    targetPort: 9091
  selector:
    app: pushgateway
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: exporter
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/version: 2.3.0
  name: kube-state-metrics
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  template:
    metadata:
      labels:
        app.kubernetes.io/component: exporter
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/version: 2.3.0
    spec:
      automountServiceAccountToken: true
      containers:
      - image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.6.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5
        name: kube-state-metrics
        ports:
        - containerPort: 8080
          name: http-metrics
        - containerPort: 8081
          name: telemetry
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 65534
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: kube-state-metrics
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus-server
  name: prometheus-deployment
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        image: prom/prometheus
        name: prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - mountPath: /etc/prometheus/
          name: prometheus-config-volume
        - mountPath: /prometheus/
          name: prometheus-storage-volume
      volumes:
      - configMap:
          defaultMode: 420
          name: prometheus-server-conf
        name: prometheus-config-volume
      - emptyDir: {}
        name: prometheus-storage-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pushgateway
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pushgateway
  template:
    metadata:
      labels:
        app: pushgateway
    spec:
      containers:
      - image: prom/pushgateway
        imagePullPolicy: Always
        name: pushgateway
        ports:
        - containerPort: 9091
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: 5m
            memory: 32Mi
