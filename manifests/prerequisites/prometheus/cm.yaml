apiVersion: v1
data:
  prometheus.rules: |-
    groups:
      - name: numalogic.aiops.metrics
        rules:
          - record: namespace_pod_http_server_requests_errors
            expr: |
              sum(rate(http_server_requests_seconds_count{status=~"5[0-9]+"}[1m])) by (namespace, rollouts_pod_template_hash)
          - record: namespace_app_rollouts_http_request_count
            expr: |
              sum(rate(http_server_requests_seconds_count[1m])) by (namespace, rollouts_pod_template_hash)
          - record: namespace_app_rollouts_http_request_error_rate
            expr: |
              (namespace_app_rollouts_http_request_errors/namespace_app_rollouts_http_request_count)*100
  

#  prometheus.rules: "groups:\n- name: deploy.better.metric.rules\n  rules:\n  - record:
#    namespace_asset_cpu_usage_seconds_total\n    expr: |\n      sum by (namespace,
#    assetAlias) (\n              sum(rate(container_cpu_usage_seconds_total{image!=\"\",
#    container!=\"\"}[5m])) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n
#    \             label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\",
#    \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_cpu_resource_requests\n
#    \   expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"cpu\"})
#    by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"},
#    \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n    labels:\n
#    \     numalogic: \"true\"\n  - record: namespace_asset_memory_usage_bytes\n    expr:
#    |\n      sum by (namespace, assetAlias) (\n              sum(container_memory_usage_bytes{image!=\"\",
#    container!=\"\"}) by (namespace, pod)\n              * on (namespace, pod) group_left(assetAlias)\n
#    \             label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\",
#    \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_memory_resource_requests\n
#    \   expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"memory\"})
#    by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"},
#    \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_pod_cpu_utilization\n
#    \   expr: namespace_asset_cpu_usage_seconds_total * 100 / namespace_asset_cpu_resource_requests\n
#    \   labels:\n      numalogic: \"true\"\n  - record: namespace_asset_pod_memory_utilization\n
#    \   expr: namespace_asset_memory_usage_bytes * 100 / namespace_asset_memory_resource_requests\n
#    \   labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_count\n
#    \   expr: |\n      label_join((sum(label_replace(\n                  (kube_pod_status_ready{condition=\"true\"}
#    * on (namespace, pod) group_left(label_app) kube_pod_labels{job=\"kube-state-metrics\"}),
#    \"app\", \"$1\", \"label_app\",\"(.*)\")) by (namespace, app)), \"apps_deployment\",
#    \"\", \"app\"\n      )\n  - record: namespace_app_pod_count_no_alert\n    expr:
#    sum(namespace_app_pod_count) by (namespace, app, apps_deployment)\n  - record:
#    namespace_app_pod_http_server_requests_latency\n    expr: label_join((sum(rate(http_server_requests_seconds_sum{status=\"200\"}[1m]))
#    by (namespace, app) / sum(rate(http_server_requests_seconds_count{status=\"200\"}[1m]))
#    by (namespace, app)), \"apps_deployment\", \"\", \"app\")\n    labels:\n      numalogic:
#    \"true\"\n  - record: namespace_app_pod_http_server_requests_errors_4xx\n    expr:
#    label_join((sum(rate(http_server_requests_seconds_count{status=~\"4[0-9]+\"}[1m]))
#    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
#    \ - record: namespace_app_pod_http_server_requests_errors_5xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m]))
#    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
#    \ - record: namespace_app_pod_http_server_requests_2xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"2[0-9]+\"}[1m]))
#    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
#    \ - record: namespace_app_pod_http_server_requests_errors\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"[4-5][0-9]+\"}[1m]))
#    by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
#    \   labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_http_server_requests_total\n
#    \   expr: label_join((sum(rate(http_server_requests_seconds_count[1m])) by (namespace,
#    app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n
#    \ \n  - record: namespace_app_pod_http_server_requests_error_rate\n    expr: namespace_app_pod_http_server_requests_errors_5xx
#    / namespace_app_pod_http_server_requests_total\n    labels:\n      numalogic:
#    \"true\"\n  - record: namespace_hash_pod_count\n    expr: sum(label_replace((kube_pod_status_ready{condition=\"true\"}
#    * on (namespace, pod) group_left(label_rollouts_pod_template_hash) kube_pod_labels{job=\"kube-state-metrics\"}),
#    \"hash_id\", \"$1\", \"label_rollouts_pod_template_hash\",\"(.*)\")) by (namespace,
#    hash_id)\n  - record: namespace_hash_http_server_requests_errors_5xx\n    expr:
#    sum(label_replace(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m]),
#    \"hash_id\", \"$1\", \"rollouts_pod_template_hash\", \"(.*)\")) by (namespace,
#    hash_id) / namespace_hash_pod_count\n  - record: namespace_hash_pod_http_server_requests_total\n
#    \   expr: sum(label_replace(rate(http_server_requests_seconds_count[1m]), \"hash_id\",
#    \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id) / namespace_hash_pod_count\n
#    \ - record: namespace_hash_pod_http_server_requests_error_rate\n    expr: namespace_hash_http_server_requests_errors_5xx
#    / namespace_hash_pod_http_server_requests_total\n    labels:\n      numalogic:
#    \"true\"\n  - record: namespace_hash_pod_http_server_requests_latency\n    expr:
#    sum(label_replace(rate(http_server_requests_seconds_sum{status=\"200\"}[1m]),
#    \"hash_id\", \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace,
#    hash_id) / sum(label_replace(rate(http_server_requests_seconds_count{status=\"200\"}[1m]),\"hash_id\",
#    \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id)\n    labels:\n
#    \     numalogic: \"true\""
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    rule_files:
      - /etc/prometheus/prometheus.rules
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc:9093"
    scrape_configs:
      - job_name: 'pushgateway'
        honor_labels: true
        static_configs:
          - targets: ['pushgateway.monitoring.svc.cluster.local:9091']

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep

      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kube-state-metrics'
        static_configs:
          - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
      - job_name: numalogic-rollout-demo
        scrape_interval: 10s
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: k8s_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: k8s_pod_name
        - source_labels: [__address__]
          action: replace
          regex: ([^:]+)(?::\d+)?
          replacement: ${1}:8490
          target_label: __address__
        - source_labels: [__meta_kubernetes_pod_label_app]
          action: keep
          regex: numalogic-rollout-demo
      - job_name: serviceMonitor/monitoring/iks-appmonitor-actuator/0
        honor_labels: false
        kubernetes_sd_configs:
        - role: endpoints
        scrape_interval: 5s
        metrics_path: /actuator/prometheus
        scheme: http
        tls_config:
          insecure_skip_verify: true
        relabel_configs:
        - source_labels:
          - job
          target_label: __tmp_prometheus_job_name
        - action: keep
          source_labels:
          - __meta_kubernetes_service_label_iks_metric
          - __meta_kubernetes_service_labelpresent_iks_metric
          regex: (http-metrics|actuator-prometheus|https-actuator-prometheus);true
        - action: keep
          source_labels:
          - __meta_kubernetes_endpoint_port_name
          regex: iks-metric
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Node;(.*)
          replacement: ${1}
          target_label: node
        - source_labels:
          - __meta_kubernetes_endpoint_address_target_kind
          - __meta_kubernetes_endpoint_address_target_name
          separator: ;
          regex: Pod;(.*)
          replacement: ${1}
          target_label: pod
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: service
        - source_labels:
          - __meta_kubernetes_pod_name
          target_label: pod
        - source_labels:
          - __meta_kubernetes_pod_container_name
          target_label: container
        - source_labels:
          - __meta_kubernetes_pod_label_app
          target_label: app
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_assetId
          target_label: assetId
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l1
          target_label: l1
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_l2
          target_label: l2
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_env
          target_label: env
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_pod_template_hash
          target_label: pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_pod_label_rollouts_pod_template_hash
          target_label: rollouts_pod_template_hash
          regex: (.+)
          replacement: ${1}
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: job
          replacement: ${1}
        - target_label: endpoint
          replacement: iks-metric
        - source_labels:
          - __address__
          target_label: __tmp_hash
          modulus: 1
          action: hashmod
        sample_limit: 2000
kind: ConfigMap
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","data":{"prometheus.rules":"groups:\n- name: deploy.better.metric.rules\n  rules:\n  - record: namespace_asset_cpu_usage_seconds_total\n    expr: |\n      sum by (namespace, assetAlias) (\n              sum(rate(container_cpu_usage_seconds_total{image!=\"\", container!=\"\"}[5m])) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_cpu_resource_requests\n    expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"cpu\"}) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n    labels:\n      numalogic: \"true\"\n  - record: namespace_asset_memory_usage_bytes\n    expr: |\n      sum by (namespace, assetAlias) (\n              sum(container_memory_usage_bytes{image!=\"\", container!=\"\"}) by (namespace, pod)\n              * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_memory_resource_requests\n    expr: |\n      sum by (namespace, assetAlias) (\n              sum(kube_pod_container_resource_requests{resource=\"memory\"}) by (namespace, pod) * on (namespace, pod) group_left(assetAlias)\n              label_replace(kube_pod_labels{job=\"kube-state-metrics\"}, \"assetAlias\", \"$1\", \"label_assetAlias\",\"(.*)\")\n      )\n  - record: namespace_asset_pod_cpu_utilization\n    expr: namespace_asset_cpu_usage_seconds_total * 100 / namespace_asset_cpu_resource_requests\n    labels:\n      numalogic: \"true\"\n  - record: namespace_asset_pod_memory_utilization\n    expr: namespace_asset_memory_usage_bytes * 100 / namespace_asset_memory_resource_requests\n    labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_count\n    expr: |\n      label_join((sum(label_replace(\n                  (kube_pod_status_ready{condition=\"true\"} * on (namespace, pod) group_left(label_app) kube_pod_labels{job=\"kube-state-metrics\"}), \"app\", \"$1\", \"label_app\",\"(.*)\")) by (namespace, app)), \"apps_deployment\", \"\", \"app\"\n      )\n  - record: namespace_app_pod_count_no_alert\n    expr: sum(namespace_app_pod_count) by (namespace, app, apps_deployment)\n  - record: namespace_app_pod_http_server_requests_latency\n    expr: label_join((sum(rate(http_server_requests_seconds_sum{status=\"200\"}[1m])) by (namespace, app) / sum(rate(http_server_requests_seconds_count{status=\"200\"}[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\")\n    labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_http_server_requests_errors_4xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"4[0-9]+\"}[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n  - record: namespace_app_pod_http_server_requests_errors_5xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n  - record: namespace_app_pod_http_server_requests_2xx\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"2[0-9]+\"}[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n  - record: namespace_app_pod_http_server_requests_errors\n    expr: label_join((sum(rate(http_server_requests_seconds_count{status=~\"[4-5][0-9]+\"}[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n    labels:\n      numalogic: \"true\"\n  - record: namespace_app_pod_http_server_requests_total\n    expr: label_join((sum(rate(http_server_requests_seconds_count[1m])) by (namespace, app)), \"apps_deployment\", \"\", \"app\") / namespace_app_pod_count_no_alert\n  \n  - record: namespace_app_pod_http_server_requests_error_rate\n    expr: namespace_app_pod_http_server_requests_errors_5xx / namespace_app_pod_http_server_requests_total\n    labels:\n      numalogic: \"true\"\n  - record: namespace_hash_pod_count\n    expr: sum(label_replace((kube_pod_status_ready{condition=\"true\"} * on (namespace, pod) group_left(label_rollouts_pod_template_hash) kube_pod_labels{job=\"kube-state-metrics\"}), \"hash_id\", \"$1\", \"label_rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id)\n  - record: namespace_hash_http_server_requests_errors_5xx\n    expr: sum(label_replace(rate(http_server_requests_seconds_count{status=~\"5[0-9]+\"}[1m]), \"hash_id\", \"$1\", \"rollouts_pod_template_hash\", \"(.*)\")) by (namespace, hash_id) / namespace_hash_pod_count\n  - record: namespace_hash_pod_http_server_requests_total\n    expr: sum(label_replace(rate(http_server_requests_seconds_count[1m]), \"hash_id\", \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id) / namespace_hash_pod_count\n  - record: namespace_hash_pod_http_server_requests_error_rate\n    expr: namespace_hash_http_server_requests_errors_5xx / namespace_hash_pod_http_server_requests_total\n    labels:\n      numalogic: \"true\"\n  - record: namespace_hash_pod_http_server_requests_latency\n    expr: sum(label_replace(rate(http_server_requests_seconds_sum{status=\"200\"}[1m]), \"hash_id\", \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id) / sum(label_replace(rate(http_server_requests_seconds_count{status=\"200\"}[1m]),\"hash_id\", \"$1\", \"rollouts_pod_template_hash\",\"(.*)\")) by (namespace, hash_id)\n    labels:\n      numalogic: \"true\"","prometheus.yml":"global:\n  scrape_interval: 5s\n  evaluation_interval: 5s\nrule_files:\n  - /etc/prometheus/prometheus.rules\nalerting:\n  alertmanagers:\n  - scheme: http\n    static_configs:\n    - targets:\n      - \"alertmanager.monitoring.svc:9093\"\nscrape_configs:\n  - job_name: 'pushgateway'\n    honor_labels: true\n    static_configs:\n      - targets: ['pushgateway.monitoring.svc.cluster.local:9091']\n\n  - job_name: 'node-exporter'\n    kubernetes_sd_configs:\n      - role: endpoints\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_endpoints_name]\n      regex: 'node-exporter'\n      action: keep\n\n  - job_name: 'kubernetes-apiservers'\n\n    kubernetes_sd_configs:\n    - role: endpoints\n    scheme: https\n\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]\n      action: keep\n      regex: default;kubernetes;https\n\n  - job_name: 'kubernetes-nodes'\n\n    scheme: https\n\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    kubernetes_sd_configs:\n    - role: node\n\n    relabel_configs:\n    - action: labelmap\n      regex: __meta_kubernetes_node_label_(.+)\n    - target_label: __address__\n      replacement: kubernetes.default.svc:443\n    - source_labels: [__meta_kubernetes_node_name]\n      regex: (.+)\n      target_label: __metrics_path__\n      replacement: /api/v1/nodes/${1}/proxy/metrics\n\n  - job_name: 'kubernetes-pods'\n\n    kubernetes_sd_configs:\n    - role: pod\n\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n      action: keep\n      regex: true\n    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n      action: replace\n      target_label: __metrics_path__\n      regex: (.+)\n    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n      action: replace\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement: $1:$2\n      target_label: __address__\n    - action: labelmap\n      regex: __meta_kubernetes_pod_label_(.+)\n    - source_labels: [__meta_kubernetes_namespace]\n      action: replace\n      target_label: kubernetes_namespace\n    - source_labels: [__meta_kubernetes_pod_name]\n      action: replace\n      target_label: kubernetes_pod_name\n\n  - job_name: 'kube-state-metrics'\n    static_configs:\n      - targets: ['kube-state-metrics.monitoring.svc.cluster.local:8080']\n\n  - job_name: 'kubernetes-cadvisor'\n\n    scheme: https\n\n    tls_config:\n      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n    kubernetes_sd_configs:\n    - role: node\n\n    relabel_configs:\n    - action: labelmap\n      regex: __meta_kubernetes_node_label_(.+)\n    - target_label: __address__\n      replacement: kubernetes.default.svc:443\n    - source_labels: [__meta_kubernetes_node_name]\n      regex: (.+)\n      target_label: __metrics_path__\n      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor\n\n  - job_name: 'kubernetes-service-endpoints'\n\n    kubernetes_sd_configs:\n    - role: endpoints\n\n    relabel_configs:\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n      action: keep\n      regex: true\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n      action: replace\n      target_label: __scheme__\n      regex: (https?)\n    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n      action: replace\n      target_label: __metrics_path__\n      regex: (.+)\n    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n      action: replace\n      target_label: __address__\n      regex: ([^:]+)(?::\\d+)?;(\\d+)\n      replacement: $1:$2\n    - action: labelmap\n      regex: __meta_kubernetes_service_label_(.+)\n    - source_labels: [__meta_kubernetes_namespace]\n      action: replace\n      target_label: kubernetes_namespace\n    - source_labels: [__meta_kubernetes_service_name]\n      action: replace\n      target_label: kubernetes_name\n\n  - job_name: serviceMonitor/addon-metricset-ns/iks-appmonitor-actuator/0\n    honor_labels: false\n    kubernetes_sd_configs:\n    - role: endpoints\n    scrape_interval: 5s\n    metrics_path: /actuator/prometheus\n    scheme: https\n    tls_config:\n      insecure_skip_verify: true\n    relabel_configs:\n    - source_labels:\n      - job\n      target_label: __tmp_prometheus_job_name\n    - action: keep\n      source_labels:\n      - __meta_kubernetes_service_label_iks_metric\n      - __meta_kubernetes_service_labelpresent_iks_metric\n      regex: (actuator-prometheus|https-actuator-prometheus);true\n    - action: keep\n      source_labels:\n      - __meta_kubernetes_endpoint_port_name\n      regex: iks-metric\n    - source_labels:\n      - __meta_kubernetes_endpoint_address_target_kind\n      - __meta_kubernetes_endpoint_address_target_name\n      separator: ;\n      regex: Node;(.*)\n      replacement: ${1}\n      target_label: node\n    - source_labels:\n      - __meta_kubernetes_endpoint_address_target_kind\n      - __meta_kubernetes_endpoint_address_target_name\n      separator: ;\n      regex: Pod;(.*)\n      replacement: ${1}\n      target_label: pod\n    - source_labels:\n      - __meta_kubernetes_namespace\n      target_label: namespace\n    - source_labels:\n      - __meta_kubernetes_service_name\n      target_label: service\n    - source_labels:\n      - __meta_kubernetes_pod_name\n      target_label: pod\n    - source_labels:\n      - __meta_kubernetes_pod_container_name\n      target_label: container\n    - source_labels:\n      - __meta_kubernetes_pod_label_app\n      target_label: app\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_assetId\n      target_label: assetId\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_l1\n      target_label: l1\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_l2\n      target_label: l2\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_env\n      target_label: env\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_pod_template_hash\n      target_label: pod_template_hash\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_pod_label_rollouts_pod_template_hash\n      target_label: rollouts_pod_template_hash\n      regex: (.+)\n      replacement: ${1}\n    - source_labels:\n      - __meta_kubernetes_service_name\n      target_label: job\n      replacement: ${1}\n    - target_label: endpoint\n      replacement: iks-metric\n    - source_labels:\n      - __address__\n      target_label: __tmp_hash\n      modulus: 1\n      action: hashmod\n    - source_labels:\n      - __tmp_hash\n      regex: 0\n      action: keep\n    sample_limit: 2000"},"kind":"ConfigMap","metadata":{"annotations":{},"labels":{"name":"prometheus-server-conf"},"name":"prometheus-server-conf","namespace":"monitoring"}}
  labels:
    name: prometheus-server-conf
  name: prometheus-server-conf
  namespace: monitoring
