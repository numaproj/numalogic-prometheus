---
# Source: redis-cluster/templates/redis-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: numalogic-redis-cluster
  labels:
    app.kubernetes.io/name: redis-cluster
    helm.sh/chart: redis-cluster-8.3.1
    app.kubernetes.io/instance: bitnami
    app.kubernetes.io/managed-by: Helm
spec:
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-cluster
      app.kubernetes.io/instance: bitnami
  replicas: 6
  serviceName: numalogic-redis-cluster-headless
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster
        helm.sh/chart: redis-cluster-8.3.1
        app.kubernetes.io/instance: bitnami
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/scripts: faeac885fe2e8845e8e47eb99ae4b196662649b880db16aec9ed05463c8571fd
        checksum/secret: 7990554b59b723957ac4e51c7737aea954e865ef0c2d8d49a905315540c9aa5f
        checksum/config: 9e199a33501500690774e9eb6d53c680eb07334e24effa596dd2b984c69931df
    spec:
      hostNetwork: false
      enableServiceLinks: false
      
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        sysctls: []
      serviceAccountName: default
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis-cluster
                    app.kubernetes.io/instance: bitnami
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      containers:
        - name: numalogic-redis-cluster
          image: docker.intuit.com/docker-rmt/bitnami/redis-cluster:7.0.5-debian-11-r19
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          command: ['/bin/bash', '-c']
          args:
            - |
              # Backwards compatibility change
              if ! [[ -f /opt/bitnami/redis/etc/redis.conf ]]; then
                  echo COPYING FILE
                  cp  /opt/bitnami/redis/etc/redis-default.conf /opt/bitnami/redis/etc/redis.conf
              fi
              pod_index=($(echo "$POD_NAME" | tr "-" "\n"))
              pod_index="${pod_index[-1]}"
              if [[ "$pod_index" == "0" ]]; then
                export REDIS_CLUSTER_CREATOR="yes"
                export REDIS_CLUSTER_REPLICAS="1"
              fi
              /opt/bitnami/scripts/redis-cluster/entrypoint.sh /opt/bitnami/scripts/redis-cluster/run.sh
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_NODES
              value: "numalogic-redis-cluster-0.numalogic-redis-cluster-headless numalogic-redis-cluster-1.numalogic-redis-cluster-headless numalogic-redis-cluster-2.numalogic-redis-cluster-headless numalogic-redis-cluster-3.numalogic-redis-cluster-headless numalogic-redis-cluster-4.numalogic-redis-cluster-headless numalogic-redis-cluster-5.numalogic-redis-cluster-headless "
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: numalogic-redis-cluster
                  key: redis-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: numalogic-redis-cluster
                  key: redis-password
            - name: REDIS_AOF_ENABLED
              value: "yes"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT_NUMBER
              value: "6379"
          ports:
            - name: tcp-redis
              containerPort: 6379
            - name: tcp-redis-bus
              containerPort: 16379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: redis-data
              mountPath: /bitnami/redis/data
              subPath: 
            - name: default-config
              mountPath: /opt/bitnami/redis/etc/redis-default.conf
              subPath: redis-default.conf
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: scripts
          configMap:
            name: numalogic-redis-cluster-scripts
            defaultMode: 0755
        - name: default-config
          configMap:
            name: numalogic-redis-cluster-default
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis-cluster
          app.kubernetes.io/instance: bitnami
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
